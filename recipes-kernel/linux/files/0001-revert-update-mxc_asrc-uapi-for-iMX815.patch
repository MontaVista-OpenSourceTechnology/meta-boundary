From 42751b404017e095eb04671aac444bb8f85c2cdb Mon Sep 17 00:00:00 2001
From: Chris Dimich <chris.dimich@boundarydevices.com>
Date: Tue, 17 Dec 2019 13:11:51 -0800
Subject: [PATCH 1/1] revert update mxc_asrc uapi for iMX815

---
 include/uapi/linux/mxc_asrc.h |  16 +++--
 sound/soc/fsl/fsl_asrc.c      |  58 +++++++-----------
 sound/soc/fsl/fsl_asrc.h      |   8 ---
 sound/soc/fsl/fsl_asrc_m2m.c  | 109 ++++++++++++++++++++--------------
 4 files changed, 95 insertions(+), 96 deletions(-)

diff --git a/include/uapi/linux/mxc_asrc.h b/include/uapi/linux/mxc_asrc.h
index 79059c3be2c4..837deea53f5b 100644
--- a/include/uapi/linux/mxc_asrc.h
+++ b/include/uapi/linux/mxc_asrc.h
@@ -34,9 +34,10 @@ enum asrc_pair_index {
 	ASRC_PAIR_A = 0,
 	ASRC_PAIR_B = 1,
 	ASRC_PAIR_C = 2,
-	ASRC_PAIR_D = 3,
 };
 
+#define ASRC_PAIR_MAX_NUM	(ASRC_PAIR_C + 1)
+
 enum asrc_inclk {
 	INCLK_NONE = 0x03,
 	INCLK_ESAI_RX = 0x00,
@@ -116,14 +117,21 @@ enum asrc_outclk {
 	OUTCLK_HDMI_TX_SAI0_TX_BCLK     = 0x25,
 };
 
+enum asrc_word_width {
+	ASRC_WIDTH_24_BIT = 0,
+	ASRC_WIDTH_16_BIT = 1,
+	ASRC_WIDTH_8_BIT = 2,
+};
+
 struct asrc_config {
 	enum asrc_pair_index pair;
 	unsigned int channel_num;
+	unsigned int buffer_num;
 	unsigned int dma_buffer_size;
 	unsigned int input_sample_rate;
 	unsigned int output_sample_rate;
-	snd_pcm_format_t input_format;
-	snd_pcm_format_t output_format;
+	enum asrc_word_width input_word_width;
+	enum asrc_word_width output_word_width;
 	enum asrc_inclk inclk;
 	enum asrc_outclk outclk;
 };
@@ -131,8 +139,6 @@ struct asrc_config {
 struct asrc_req {
 	unsigned int chn_num;
 	enum asrc_pair_index index;
-	uint64_t supported_in_format;
-	uint64_t supported_out_format;
 };
 
 struct asrc_querybuf {
diff --git a/sound/soc/fsl/fsl_asrc.c b/sound/soc/fsl/fsl_asrc.c
index 771467dfc503..04e61aa6fc9b 100644
--- a/sound/soc/fsl/fsl_asrc.c
+++ b/sound/soc/fsl/fsl_asrc.c
@@ -312,8 +312,6 @@ static int fsl_asrc_config_pair(struct fsl_asrc_pair *pair, bool p2p_in, bool p2
 	struct clk *clk;
 	bool ideal;
 	int ret;
-	enum asrc_word_width input_word_width;
-	enum asrc_word_width output_word_width;
 
 	if (!config) {
 		pair_err("invalid pair config\n");
@@ -326,32 +324,9 @@ static int fsl_asrc_config_pair(struct fsl_asrc_pair *pair, bool p2p_in, bool p2
 		return -EINVAL;
 	}
 
-	switch (snd_pcm_format_width(config->input_format)) {
-	case 8:
-		input_word_width = ASRC_WIDTH_8_BIT;
-		break;
-	case 16:
-		input_word_width = ASRC_WIDTH_16_BIT;
-		break;
-	case 24:
-		input_word_width = ASRC_WIDTH_24_BIT;
-		break;
-	default:
-		pair_err("does not support this input format, %d\n",
-			 config->input_format);
-		return -EINVAL;
-	}
-
-	switch (snd_pcm_format_width(config->output_format)) {
-	case 16:
-		output_word_width = ASRC_WIDTH_16_BIT;
-		break;
-	case 24:
-		output_word_width = ASRC_WIDTH_24_BIT;
-		break;
-	default:
-		pair_err("does not support this output format, %d\n",
-			 config->output_format);
+	/* Validate output width */
+	if (config->output_word_width == ASRC_WIDTH_8_BIT) {
+		pair_err("does not support 8bit width output\n");
 		return -EINVAL;
 	}
 
@@ -479,8 +454,8 @@ static int fsl_asrc_config_pair(struct fsl_asrc_pair *pair, bool p2p_in, bool p2
 	/* Implement word_width configurations */
 	regmap_update_bits(asrc_priv->regmap, REG_ASRMCR1(index),
 			   ASRMCR1i_OW16_MASK | ASRMCR1i_IWD_MASK,
-			   ASRMCR1i_OW16(output_word_width) |
-			   ASRMCR1i_IWD(input_word_width));
+			   ASRMCR1i_OW16(config->output_word_width) |
+			   ASRMCR1i_IWD(config->input_word_width));
 
 	/* Enable BUFFER STALL */
 	regmap_update_bits(asrc_priv->regmap, REG_ASRMCR(index),
@@ -640,13 +615,13 @@ static int fsl_asrc_dai_hw_params(struct snd_pcm_substream *substream,
 				  struct snd_soc_dai *dai)
 {
 	struct fsl_asrc *asrc_priv = snd_soc_dai_get_drvdata(dai);
+	int width = params_width(params);
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct fsl_asrc_pair *pair = runtime->private_data;
 	unsigned int channels = params_channels(params);
 	unsigned int rate = params_rate(params);
 	struct asrc_config config;
-	snd_pcm_format_t format;
-	int ret;
+	int word_width, ret;
 
 	ret = fsl_asrc_request_pair(channels, pair);
 	if (ret) {
@@ -657,17 +632,24 @@ static int fsl_asrc_dai_hw_params(struct snd_pcm_substream *substream,
 	pair->pair_streams |= BIT(substream->stream);
 	pair->config = &config;
 
+	if (width == 8)
+		width = ASRC_WIDTH_8_BIT;
+	else if (width == 16)
+		width = ASRC_WIDTH_16_BIT;
+	else
+		width = ASRC_WIDTH_24_BIT;
+
 	if (asrc_priv->asrc_width == 16)
-		format = SNDRV_PCM_FORMAT_S16_LE;
+		word_width = ASRC_WIDTH_16_BIT;
 	else
-		format = SNDRV_PCM_FORMAT_S24_LE;
+		word_width = ASRC_WIDTH_24_BIT;
 
 	config.pair = pair->index;
 	config.channel_num = channels;
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-		config.input_format   = params_format(params);
-		config.output_format  = format;
+		config.input_word_width   = width;
+		config.output_word_width  = word_width;
 		config.input_sample_rate  = rate;
 		config.output_sample_rate = asrc_priv->asrc_rate;
 
@@ -686,8 +668,8 @@ static int fsl_asrc_dai_hw_params(struct snd_pcm_substream *substream,
 		}
 
 	} else {
-		config.input_format   = format;
-		config.output_format  = params_format(params);
+		config.input_word_width   = word_width;
+		config.output_word_width  = width;
 		config.input_sample_rate  = asrc_priv->asrc_rate;
 		config.output_sample_rate = rate;
 
diff --git a/sound/soc/fsl/fsl_asrc.h b/sound/soc/fsl/fsl_asrc.h
index 22456c8b6dfe..38394a4fe7df 100644
--- a/sound/soc/fsl/fsl_asrc.h
+++ b/sound/soc/fsl/fsl_asrc.h
@@ -13,12 +13,9 @@
 #ifndef _FSL_ASRC_H
 #define _FSL_ASRC_H
 
-#include <sound/asound.h>
 #include <uapi/linux/mxc_asrc.h>
 #include <linux/miscdevice.h>
 
-#define ASRC_PAIR_MAX_NUM	(ASRC_PAIR_C + 1)
-
 #define IN	0
 #define OUT	1
 
@@ -295,11 +292,6 @@
 
 #define ASRC_CLK_MAX_NUM	16
 
-enum asrc_word_width {
-	ASRC_WIDTH_24_BIT = 0,
-	ASRC_WIDTH_16_BIT = 1,
-	ASRC_WIDTH_8_BIT  = 2,
-};
 
 struct dma_block {
 	void *dma_vaddr;
diff --git a/sound/soc/fsl/fsl_asrc_m2m.c b/sound/soc/fsl/fsl_asrc_m2m.c
index ea4f863caee1..c478fa43e1bd 100644
--- a/sound/soc/fsl/fsl_asrc_m2m.c
+++ b/sound/soc/fsl/fsl_asrc_m2m.c
@@ -22,7 +22,7 @@ struct fsl_asrc_m2m {
 	unsigned int sg_nodes[2];
 	struct scatterlist sg[2][4];
 
-	snd_pcm_format_t word_format[2];
+	enum asrc_word_width word_width[2];
 	unsigned int rate[2];
 	unsigned int last_period_size;
 	u32 watermark[2];
@@ -80,35 +80,26 @@ static void fsl_asrc_read_last_FIFO(struct fsl_asrc_pair *pair)
 	struct fsl_asrc *asrc_priv = pair->asrc_priv;
 	enum asrc_pair_index index = pair->index;
 	struct dma_block *output = &m2m->dma_block[OUT];
-	u32 i, reg, size, t_size = 0, width;
-	u32 *reg32 = NULL;
+	u32 i, reg, size, t_size = 0;
+	u32 *reg24 = NULL;
 	u16 *reg16 = NULL;
-	u8  *reg24 = NULL;
 
-	width = snd_pcm_format_physical_width(m2m->word_format[OUT]);
-
-	if (width == 32)
-		reg32 = output->dma_vaddr + output->length;
-	else if (width == 16)
-		reg16 = output->dma_vaddr + output->length;
-	else
+	if (m2m->word_width[OUT] == ASRC_WIDTH_24_BIT)
 		reg24 = output->dma_vaddr + output->length;
+	else
+		reg16 = output->dma_vaddr + output->length;
 
 retry:
 	size = fsl_asrc_get_output_FIFO_size(pair);
 
 	for (i = 0; i < size * pair->channels; i++) {
 		regmap_read(asrc_priv->regmap, REG_ASRDO(index), &reg);
-		if (reg32) {
-			*(reg32) = reg;
-			reg32++;
-		} else if (reg16) {
+		if (reg24) {
+			*(reg24) = reg;
+			reg24++;
+		} else {
 			*(reg16) = (u16)reg;
 			reg16++;
-		} else {
-			*reg24++ = (u8)reg;
-			*reg24++ = (u8)(reg >> 8);
-			*reg24++ = (u8)(reg >> 16);
 		}
 	}
 	t_size += size;
@@ -119,12 +110,10 @@ static void fsl_asrc_read_last_FIFO(struct fsl_asrc_pair *pair)
 	if (t_size > m2m->last_period_size)
 		t_size = m2m->last_period_size;
 
-	if (reg32)
+	if (reg24)
 		output->length += t_size * pair->channels * 4;
-	else if (reg16)
-		output->length += t_size * pair->channels * 2;
 	else
-		output->length += t_size * pair->channels * 3;
+		output->length += t_size * pair->channels * 2;
 }
 
 static int fsl_allocate_dma_buf(struct fsl_asrc_pair *pair)
@@ -157,7 +146,7 @@ static int fsl_allocate_dma_buf(struct fsl_asrc_pair *pair)
 
 static int fsl_asrc_dmaconfig(struct fsl_asrc_pair *pair, struct dma_chan *chan,
 			      u32 dma_addr, void *buf_addr, u32 buf_len,
-			      bool dir, snd_pcm_format_t word_format)
+			      bool dir, enum asrc_word_width word_width)
 {
 	struct dma_async_tx_descriptor *desc = pair->desc[dir];
 	struct fsl_asrc *asrc_priv = pair->asrc_priv;
@@ -169,17 +158,14 @@ static int fsl_asrc_dmaconfig(struct fsl_asrc_pair *pair, struct dma_chan *chan,
 	enum dma_slave_buswidth buswidth;
 	int ret, i;
 
-	switch (snd_pcm_format_physical_width(word_format)) {
-	case 8:
+	switch (word_width) {
+	case ASRC_WIDTH_8_BIT:
 		buswidth = DMA_SLAVE_BUSWIDTH_1_BYTE;
 		break;
-	case 16:
+	case ASRC_WIDTH_16_BIT:
 		buswidth = DMA_SLAVE_BUSWIDTH_2_BYTES;
 		break;
-	case 24:
-		buswidth = DMA_SLAVE_BUSWIDTH_3_BYTES;
-		break;
-	case 32:
+	case ASRC_WIDTH_24_BIT:
 		buswidth = DMA_SLAVE_BUSWIDTH_4_BYTES;
 		break;
 	default:
@@ -263,6 +249,7 @@ static int fsl_asrc_prepare_io_buffer(struct fsl_asrc_pair *pair,
 	struct fsl_asrc_m2m *m2m = pair->private;
 	struct fsl_asrc *asrc_priv = pair->asrc_priv;
 	unsigned int *dma_len = &m2m->dma_block[dir].length;
+	enum asrc_word_width width = m2m->word_width[dir];
 	void *dma_vaddr = m2m->dma_block[dir].dma_vaddr;
 	struct dma_chan *dma_chan = pair->dma_chan[dir];
 	unsigned int buf_len, wm = m2m->watermark[dir];
@@ -283,7 +270,20 @@ static int fsl_asrc_prepare_io_buffer(struct fsl_asrc_pair *pair,
 		buf_len = pbuf->output_buffer_length;
 	}
 
-	word_size = snd_pcm_format_physical_width(m2m->word_format[dir]) / 8;
+	switch (width) {
+	case ASRC_WIDTH_24_BIT:
+		word_size = 4;
+		break;
+	case ASRC_WIDTH_16_BIT:
+		word_size = 2;
+		break;
+	case ASRC_WIDTH_8_BIT:
+		word_size = 1;
+		break;
+	default:
+		pair_err("wrong word length\n");
+		return -EINVAL;
+	}
 
 	if (buf_len < word_size * pair->channels * wm ||
 	    buf_len > ASRC_DMA_BUFFER_SIZE ||
@@ -312,7 +312,7 @@ static int fsl_asrc_prepare_io_buffer(struct fsl_asrc_pair *pair,
 	fifo_addr = asrc_priv->paddr + REG_ASRDx(dir, index);
 
 	return fsl_asrc_dmaconfig(pair, dma_chan, fifo_addr, dma_vaddr,
-				  *dma_len, dir, m2m->word_format[dir]);
+				  *dma_len, dir, width);
 }
 
 static int fsl_asrc_prepare_buffer(struct fsl_asrc_pair *pair,
@@ -528,12 +528,6 @@ static long fsl_asrc_ioctl_req_pair(struct fsl_asrc_pair *pair,
 	pair->channels = req.chn_num;
 
 	req.index = pair->index;
-	req.supported_in_format = FSL_ASRC_FORMATS_TX;
-	req.supported_out_format = FSL_ASRC_FORMATS_RX;
-	if (asrc_priv->dma_type == DMA_EDMA) {
-		req.supported_in_format &= ~SNDRV_PCM_FMTBIT_S24_3LE;
-		req.supported_out_format &= ~SNDRV_PCM_FMTBIT_S24_3LE;
-	}
 
 	ret = copy_to_user(user, &req, sizeof(req));
 	if (ret) {
@@ -577,8 +571,8 @@ static long fsl_asrc_ioctl_config_pair(struct fsl_asrc_pair *pair,
 	m2m->dma_block[IN].length = ASRC_DMA_BUFFER_SIZE;
 	m2m->dma_block[OUT].length = ASRC_DMA_BUFFER_SIZE;
 
-	m2m->word_format[IN] = config.input_format;
-	m2m->word_format[OUT] = config.output_format;
+	m2m->word_width[IN] = config.input_word_width;
+	m2m->word_width[OUT] = config.output_word_width;
 
 	m2m->rate[IN] = config.input_sample_rate;
 	m2m->rate[OUT] = config.output_sample_rate;
@@ -661,8 +655,35 @@ static long fsl_asrc_calc_last_period_size(struct fsl_asrc_pair *pair,
 	unsigned int last_period_size;
 	unsigned int remain;
 
-	in_width = snd_pcm_format_physical_width(m2m->word_format[IN]) / 8;
-	out_width = snd_pcm_format_physical_width(m2m->word_format[OUT]) / 8;
+	switch (m2m->word_width[IN]) {
+	case ASRC_WIDTH_24_BIT:
+		in_width = 4;
+		break;
+	case ASRC_WIDTH_16_BIT:
+		in_width = 2;
+		break;
+	case ASRC_WIDTH_8_BIT:
+		in_width = 1;
+		break;
+	default:
+		in_width = 2;
+		break;
+	}
+
+	switch (m2m->word_width[OUT]) {
+	case ASRC_WIDTH_24_BIT:
+		out_width = 4;
+		break;
+	case ASRC_WIDTH_16_BIT:
+		out_width = 2;
+		break;
+	case ASRC_WIDTH_8_BIT:
+		out_width = 1;
+		break;
+	default:
+		out_width = 2;
+		break;
+	}
 
 	in_samples = pbuf->input_buffer_length / (in_width * channels);
 
@@ -987,7 +1008,6 @@ static int fsl_asrc_m2m_remove(struct platform_device *pdev)
 	return 0;
 }
 
-#ifdef CONFIG_PM_SLEEP
 static void fsl_asrc_m2m_suspend(struct fsl_asrc *asrc_priv)
 {
 	struct fsl_asrc_pair *pair;
@@ -1043,4 +1063,3 @@ static void fsl_asrc_m2m_resume(struct fsl_asrc *asrc_priv)
 		spin_unlock_irqrestore(&asrc_priv->lock, lock_flags);
 	}
 }
-#endif
-- 
2.24.1

